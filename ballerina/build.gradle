/*
 * Copyright (c) 2025, WSO2 LLC. (http://www.wso2.com).
 *
 * WSO2 LLC. licenses this file to you under the Apache License,
 * Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

import org.apache.tools.ant.taskdefs.condition.Os

plugins {
    id 'io.ballerina.plugin'
}

description = 'MSSQL-backed short-term chat message store - Ballerina'

def packageName = "ai.mssql"
def packageOrg = "ballerinax"
def tomlVersion = stripBallerinaExtensionVersion("${project.version}")
def ballerinaTomlFilePlaceHolder = new File("${project.rootDir}/build-config/resources/Ballerina.toml")
def ballerinaTomlFile = new File("$project.projectDir/Ballerina.toml")

def stripBallerinaExtensionVersion(String extVersion) {
    if (extVersion.matches(project.ext.timestampedVersionRegex)) {
        def splitVersion = extVersion.split('-')
        if (splitVersion.length > 3) {
            def strippedValues = splitVersion[0..-4]
            return strippedValues.join('-')
        } else {
            return extVersion
        }
    } else {
        return extVersion.replace("${project.ext.snapshotVersion}", "")
    }
}

ballerina {
    packageOrganization = packageOrg
    module = packageName
    testCoverageParam = "--code-coverage --coverage-format=xml"
    isConnector = true
    platform = "any"
}

task updateTomlFiles {
    doLast {
        def newBallerinaToml = ballerinaTomlFilePlaceHolder.text.replace("@project.version@", project.version)
        newBallerinaToml = newBallerinaToml.replace("@toml.version@", tomlVersion)
        ballerinaTomlFile.text = newBallerinaToml
    }
}

task commitTomlFiles {
    doLast {
        project.exec {
            ignoreExitValue true
            if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                commandLine 'cmd', '/c', "git commit -m \"[Automated] Update the toml files\" Ballerina.toml Dependencies.toml"
            } else {
                commandLine 'sh', '-c', "git commit -m '[Automated] Update the toml files' Ballerina.toml Dependencies.toml"
            }
        }
    }
}

tasks.register('startMSSQLServer') {
    doLast {
        def stdOut = new ByteArrayOutputStream()
        def cmd = Os.isFamily(Os.FAMILY_WINDOWS) ? ['cmd', '/c'] : ['sh', '-c']
        exec {
            commandLine cmd + ["docker compose -f tests/resources/compose.yaml ps --services --filter status=running"]
            standardOutput = stdOut
        }
        if (stdOut.toString().trim().isEmpty()) {
            println "Starting the MS SQL container"
            exec {
                commandLine cmd + ["docker compose -f tests/resources/compose.yaml up -d"]
            }
            
            def healthCheckPassed = false
            int retries = 18
            for (int i = 0; i < retries; i++) {
                def healthOut = new ByteArrayOutputStream()
                exec {
                    commandLine cmd + ["docker compose -f tests/resources/compose.yaml ps --format '{{.Name}}: {{.Health}}'"]
                    standardOutput = healthOut
                    ignoreExitValue = true
                }
                def healthStatus = healthOut.toString().trim()
                if (healthStatus && !healthStatus.contains("unhealthy") && !healthStatus.contains("starting")) {
                    healthCheckPassed = true
                    break
                }
                sleep(5 * 1000)
            }
            if (!healthCheckPassed) {
                throw new GradleException("The MS SQL container did not become healthy in time.")
            }
            println "The MS SQL container is healthy."
        } else {
            println "Expected MS SQL container is already running, not starting new containers."
        }
    }
}

tasks.register('stopMSSQLServer') {
    doLast {
        def stdOut = new ByteArrayOutputStream()
        def cmd = Os.isFamily(Os.FAMILY_WINDOWS) ? ['cmd', '/c'] : ['sh', '-c']
        exec {
            commandLine cmd + ["docker compose -f tests/resources/compose.yaml ps --services --filter status=running"]
            standardOutput = stdOut
        }
        if (!stdOut.toString().trim().isEmpty()) {
            println "Stopping the MS SQL container"
            exec {
                commandLine cmd + ["docker compose -f tests/resources/compose.yaml rm -svf"]
                standardOutput = stdOut
            }
            println stdOut.toString()
            sleep(10 * 1000)
        } else {
            println "The MS SQL server is not started."
        }
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            artifact source: createArtifactZip, extension: 'zip'
        }
    }
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/ballerina-platform/module-${packageOrg}-${packageName}")
            credentials {
                username = System.getenv("publishUser")
                password = System.getenv("publishPAT")
            }
        }
    }
}

clean {
    delete 'build'
}

build.dependsOn "generatePomFileForMavenPublication"
publishToMavenLocal.dependsOn build
publish.dependsOn build
test.dependsOn "startMSSQLServer"
test.finalizedBy "stopMSSQLServer"
